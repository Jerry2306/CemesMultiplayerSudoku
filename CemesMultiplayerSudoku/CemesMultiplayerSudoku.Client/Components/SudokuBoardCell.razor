@using CemesMultiplayerSudoku.Client.Core.Models
@using System.Drawing
@using CemesMultiplayerSudoku.Client.Core.Extensions
@if (Cell is not null)
{
    <td @onclick="CellClicked" style="@GetTdStyle()">
        @if (Cell.Dto is { Value: 0, Notes.Count: > 0 })
        {
            <div class="notes-container">
                @foreach (var note in Cell.Dto.Notes)
                {
                    <div class="@("note-number " + GetNoteValueClass(note))">@note</div>
                }
            </div>
        }
        else
        {
            @(Cell.Dto.Value == 0 ? "" : Cell.Dto.Value.ToString())
        }
    </td>
}

@code {

    [Parameter]
    public CellStateModel? Cell { get; set; }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public EventCallback<Point> OnCellClicked { get; set; }

    private Task CellClicked() => OnCellClicked.InvokeAsync(new Point(X, Y));

    private string? GetTdStyle()
    {
        if (!(Cell?.Dto.IsCorrect ?? true))
            return "color: rgb(216, 60, 63);";

        string? style = null;

        if (Cell?.SelectedNumbers?.TryGetValue(Cell.Dto.Value, out var colors) ?? false)
        {
            var color = colors.CalculateColors();
            return $"background-color: rgba({color.R},{color.G},{color.B}, .4);";
        }

        if (Cell?.ActiveColor is null)
            return style;

        var activeColor = Cell.ActiveColor.Value;
        style ??= string.Empty;
        return style + $"background-color: rgba({activeColor.R},{activeColor.G},{activeColor.B}, .1);";
    }

    private static Dictionary<byte, string> noteValueClassMappings = new()
    {
        { 1, "one" },
        { 2, "two" },
        { 3, "three" },
        { 4, "four" },
        { 5, "five" },
        { 6, "six" },
        { 7, "seven" },
        { 8, "eight" },
        { 9, "nine" },
    };

    private string GetNoteValueClass(byte value) => noteValueClassMappings.TryGetValue(value, out var className) ? className : string.Empty;

}